//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FacadeService.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInvestors", ReplyAction="http://tempuri.org/IService1/GetInvestorsResponse")]
        ClassLibrary1.InvestorsTO GetInvestors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInvestors", ReplyAction="http://tempuri.org/IService1/GetInvestorsResponse")]
        System.Threading.Tasks.Task<ClassLibrary1.InvestorsTO> GetInvestorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPage", ReplyAction="http://tempuri.org/IService1/GetPageResponse")]
        ClassLibrary1.TransactionTO[] GetPage(int pageNo, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPage", ReplyAction="http://tempuri.org/IService1/GetPageResponse")]
        System.Threading.Tasks.Task<ClassLibrary1.TransactionTO[]> GetPageAsync(int pageNo, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInvestor", ReplyAction="http://tempuri.org/IService1/GetInvestorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClassLibrary1.NotFoundException), Action="http://tempuri.org/IService1/GetInvestorNotFoundExceptionFault", Name="NotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary1")]
        ClassLibrary1.InvestorCETO GetInvestor(int investorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInvestor", ReplyAction="http://tempuri.org/IService1/GetInvestorResponse")]
        System.Threading.Tasks.Task<ClassLibrary1.InvestorCETO> GetInvestorAsync(int investorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Save", ReplyAction="http://tempuri.org/IService1/SaveResponse")]
        bool Save(ClassLibrary1.TransactionTO t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Save", ReplyAction="http://tempuri.org/IService1/SaveResponse")]
        System.Threading.Tasks.Task<bool> SaveAsync(ClassLibrary1.TransactionTO t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Refresh", ReplyAction="http://tempuri.org/IService1/RefreshResponse")]
        void Refresh();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Refresh", ReplyAction="http://tempuri.org/IService1/RefreshResponse")]
        System.Threading.Tasks.Task RefreshAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DumpData", ReplyAction="http://tempuri.org/IService1/DumpDataResponse")]
        void DumpData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DumpData", ReplyAction="http://tempuri.org/IService1/DumpDataResponse")]
        System.Threading.Tasks.Task DumpDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : FacadeService.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<FacadeService.ServiceReference1.IService1>, FacadeService.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClassLibrary1.InvestorsTO GetInvestors() {
            return base.Channel.GetInvestors();
        }
        
        public System.Threading.Tasks.Task<ClassLibrary1.InvestorsTO> GetInvestorsAsync() {
            return base.Channel.GetInvestorsAsync();
        }
        
        public ClassLibrary1.TransactionTO[] GetPage(int pageNo, int pageSize) {
            return base.Channel.GetPage(pageNo, pageSize);
        }
        
        public System.Threading.Tasks.Task<ClassLibrary1.TransactionTO[]> GetPageAsync(int pageNo, int pageSize) {
            return base.Channel.GetPageAsync(pageNo, pageSize);
        }
        
        public ClassLibrary1.InvestorCETO GetInvestor(int investorId) {
            return base.Channel.GetInvestor(investorId);
        }
        
        public System.Threading.Tasks.Task<ClassLibrary1.InvestorCETO> GetInvestorAsync(int investorId) {
            return base.Channel.GetInvestorAsync(investorId);
        }
        
        public bool Save(ClassLibrary1.TransactionTO t) {
            return base.Channel.Save(t);
        }
        
        public System.Threading.Tasks.Task<bool> SaveAsync(ClassLibrary1.TransactionTO t) {
            return base.Channel.SaveAsync(t);
        }
        
        public void Refresh() {
            base.Channel.Refresh();
        }
        
        public System.Threading.Tasks.Task RefreshAsync() {
            return base.Channel.RefreshAsync();
        }
        
        public void DumpData() {
            base.Channel.DumpData();
        }
        
        public System.Threading.Tasks.Task DumpDataAsync() {
            return base.Channel.DumpDataAsync();
        }
    }
}
