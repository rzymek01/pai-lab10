//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab5.FacadeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FacadeService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLatestTransaction", ReplyAction="http://tempuri.org/IService1/GetLatestTransactionResponse")]
        ClassLibrary1.TransactionTO GetLatestTransaction();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetLatestTransaction", ReplyAction="http://tempuri.org/IService1/GetLatestTransactionResponse")]
        System.IAsyncResult BeginGetLatestTransaction(System.AsyncCallback callback, object asyncState);
        
        ClassLibrary1.TransactionTO EndGetLatestTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInvestors", ReplyAction="http://tempuri.org/IService1/GetInvestorsResponse")]
        ClassLibrary1.InvestorsTO GetInvestors();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetInvestors", ReplyAction="http://tempuri.org/IService1/GetInvestorsResponse")]
        System.IAsyncResult BeginGetInvestors(System.AsyncCallback callback, object asyncState);
        
        ClassLibrary1.InvestorsTO EndGetInvestors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInvestor", ReplyAction="http://tempuri.org/IService1/GetInvestorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ClassLibrary1.NotFoundException), Action="http://tempuri.org/IService1/GetInvestorNotFoundExceptionFault", Name="NotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary1")]
        ClassLibrary1.InvestorCETO GetInvestor(int investorId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetInvestor", ReplyAction="http://tempuri.org/IService1/GetInvestorResponse")]
        System.IAsyncResult BeginGetInvestor(int investorId, System.AsyncCallback callback, object asyncState);
        
        ClassLibrary1.InvestorCETO EndGetInvestor(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Lab5.FacadeService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLatestTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLatestTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClassLibrary1.TransactionTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClassLibrary1.TransactionTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInvestorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInvestorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClassLibrary1.InvestorsTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClassLibrary1.InvestorsTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInvestorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInvestorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClassLibrary1.InvestorCETO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClassLibrary1.InvestorCETO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Lab5.FacadeService.IService1>, Lab5.FacadeService.IService1 {
        
        private BeginOperationDelegate onBeginGetLatestTransactionDelegate;
        
        private EndOperationDelegate onEndGetLatestTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onGetLatestTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInvestorsDelegate;
        
        private EndOperationDelegate onEndGetInvestorsDelegate;
        
        private System.Threading.SendOrPostCallback onGetInvestorsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInvestorDelegate;
        
        private EndOperationDelegate onEndGetInvestorDelegate;
        
        private System.Threading.SendOrPostCallback onGetInvestorCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetLatestTransactionCompletedEventArgs> GetLatestTransactionCompleted;
        
        public event System.EventHandler<GetInvestorsCompletedEventArgs> GetInvestorsCompleted;
        
        public event System.EventHandler<GetInvestorCompletedEventArgs> GetInvestorCompleted;
        
        public ClassLibrary1.TransactionTO GetLatestTransaction() {
            return base.Channel.GetLatestTransaction();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLatestTransaction(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLatestTransaction(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ClassLibrary1.TransactionTO EndGetLatestTransaction(System.IAsyncResult result) {
            return base.Channel.EndGetLatestTransaction(result);
        }
        
        private System.IAsyncResult OnBeginGetLatestTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetLatestTransaction(callback, asyncState);
        }
        
        private object[] OnEndGetLatestTransaction(System.IAsyncResult result) {
            ClassLibrary1.TransactionTO retVal = this.EndGetLatestTransaction(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLatestTransactionCompleted(object state) {
            if ((this.GetLatestTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLatestTransactionCompleted(this, new GetLatestTransactionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLatestTransactionAsync() {
            this.GetLatestTransactionAsync(null);
        }
        
        public void GetLatestTransactionAsync(object userState) {
            if ((this.onBeginGetLatestTransactionDelegate == null)) {
                this.onBeginGetLatestTransactionDelegate = new BeginOperationDelegate(this.OnBeginGetLatestTransaction);
            }
            if ((this.onEndGetLatestTransactionDelegate == null)) {
                this.onEndGetLatestTransactionDelegate = new EndOperationDelegate(this.OnEndGetLatestTransaction);
            }
            if ((this.onGetLatestTransactionCompletedDelegate == null)) {
                this.onGetLatestTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLatestTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginGetLatestTransactionDelegate, null, this.onEndGetLatestTransactionDelegate, this.onGetLatestTransactionCompletedDelegate, userState);
        }
        
        public ClassLibrary1.InvestorsTO GetInvestors() {
            return base.Channel.GetInvestors();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInvestors(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInvestors(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ClassLibrary1.InvestorsTO EndGetInvestors(System.IAsyncResult result) {
            return base.Channel.EndGetInvestors(result);
        }
        
        private System.IAsyncResult OnBeginGetInvestors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetInvestors(callback, asyncState);
        }
        
        private object[] OnEndGetInvestors(System.IAsyncResult result) {
            ClassLibrary1.InvestorsTO retVal = this.EndGetInvestors(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInvestorsCompleted(object state) {
            if ((this.GetInvestorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInvestorsCompleted(this, new GetInvestorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInvestorsAsync() {
            this.GetInvestorsAsync(null);
        }
        
        public void GetInvestorsAsync(object userState) {
            if ((this.onBeginGetInvestorsDelegate == null)) {
                this.onBeginGetInvestorsDelegate = new BeginOperationDelegate(this.OnBeginGetInvestors);
            }
            if ((this.onEndGetInvestorsDelegate == null)) {
                this.onEndGetInvestorsDelegate = new EndOperationDelegate(this.OnEndGetInvestors);
            }
            if ((this.onGetInvestorsCompletedDelegate == null)) {
                this.onGetInvestorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInvestorsCompleted);
            }
            base.InvokeAsync(this.onBeginGetInvestorsDelegate, null, this.onEndGetInvestorsDelegate, this.onGetInvestorsCompletedDelegate, userState);
        }
        
        public ClassLibrary1.InvestorCETO GetInvestor(int investorId) {
            return base.Channel.GetInvestor(investorId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInvestor(int investorId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInvestor(investorId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ClassLibrary1.InvestorCETO EndGetInvestor(System.IAsyncResult result) {
            return base.Channel.EndGetInvestor(result);
        }
        
        private System.IAsyncResult OnBeginGetInvestor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int investorId = ((int)(inValues[0]));
            return this.BeginGetInvestor(investorId, callback, asyncState);
        }
        
        private object[] OnEndGetInvestor(System.IAsyncResult result) {
            ClassLibrary1.InvestorCETO retVal = this.EndGetInvestor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInvestorCompleted(object state) {
            if ((this.GetInvestorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInvestorCompleted(this, new GetInvestorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInvestorAsync(int investorId) {
            this.GetInvestorAsync(investorId, null);
        }
        
        public void GetInvestorAsync(int investorId, object userState) {
            if ((this.onBeginGetInvestorDelegate == null)) {
                this.onBeginGetInvestorDelegate = new BeginOperationDelegate(this.OnBeginGetInvestor);
            }
            if ((this.onEndGetInvestorDelegate == null)) {
                this.onEndGetInvestorDelegate = new EndOperationDelegate(this.OnEndGetInvestor);
            }
            if ((this.onGetInvestorCompletedDelegate == null)) {
                this.onGetInvestorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInvestorCompleted);
            }
            base.InvokeAsync(this.onBeginGetInvestorDelegate, new object[] {
                        investorId}, this.onEndGetInvestorDelegate, this.onGetInvestorCompletedDelegate, userState);
        }
    }
}
